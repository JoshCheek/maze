#!/usr/bin/env ruby -s
require 'io/console'

default_width  = 40
default_height = 30

# =====  Half-assed help screen  =====
instructions = <<INSTRUCTIONS
Example:
  # use defaults
  $ #{$PROGRAM_NAME}

  # Custom width/height
  $ #{$PROGRAM_NAME} -w=20 -h=30

  # This one was nice! Not too big, and interesting paths
  $ bin/maze -w=40 -h=30 -s=323932603995730790334566679846613985025

Options
  -w=123       # Set the maze width (defaults to #{default_width})
  -h=123       # Set the maze height (defaults to #{default_height})
  -s=123       # Set the random seed (defaults to whatever Ruby initializes it with)
INSTRUCTIONS

at_exit { puts instructions if $! && !$!.kind_of?(SystemExit) }

if $h == true
  puts instructions
  exit
end

# =====  Arg parsing (done mostly by ruby via the -s flag)  =====

maze_width  = ($w || default_width).to_i
maze_height = ($h || default_height).to_i
random_seed = ($s || Random::DEFAULT.seed).to_i

# =====  Load the lib =====
$LOAD_PATH.unshift File.expand_path("../../lib", __FILE__)

# =====  Record randomness  =====
Random.srand random_seed
at_exit { puts "call with -s=#{random_seed} to get this maze again" }

# =====  Other config  =====
require 'maze/display'
display = Maze::Display.new enable: true, stream: $stdout
sleep_duration = if 1500 > maze_width * maze_height
  0.01
else
  0.001
end

# ===== Main  =====
display.clear

display.without_cursor do
  # =====  Generate the maze  =====
  require 'maze/generate'
  maze = Maze::Generate.call width: maze_width, height: maze_height do |cell, generator|
    display.call maze:    generator.maze,
                 heading: {text: "Gnerating", colour: :red},
                 green:   cell
    sleep sleep_duration
  end

  # =====  Breadth First Search  =====
  require 'maze/breadth_first_search'

  Maze::BreadthFirstSearch.call maze:      maze,
                                start:     maze.start,
                                finish:    maze.finish,
                                chunked_search: true,
                                on_search: lambda { |current, bfs|
    display.call heading: {text: 'Breadth First Search: Searching', colour: :blue},
                 maze:    maze,
                 green:   current,
                 magenta: [bfs.start, bfs.finish],
                 blue:    current.flat_map { |cell| bfs.path_to cell }.uniq,
                 orange:  bfs.explored
    sleep 0.1
  }

  puts display.colour("Press any key!", :red)
  $stdin.raw &:getc
  display.clear

  # =====  Depth First Search  =====
  require 'maze/depth_first_search'

  dfs = Maze::DepthFirstSearch.call maze: maze, start: maze.start, finish: maze.finish do |current, dfs|
    display.call maze:    maze,
                 heading: {text: 'Depth First Search: Searching', colour: :blue},
                 blue:    [*dfs.stack.map(&:first), current],
                 orange:  dfs.explored,
                 red:     dfs.finish
    sleep sleep_duration
  end

  failed_sleep_duration = 1
  failed_sleep_duration *= 0.5 if dfs.failed_paths.length > 20

  dfs.failed_paths.each do |failed_path|
    display.call maze:    maze,
                 heading: {text: 'Depth First Search: Showing Dead Ends', colour: :blue},
                 green:   [maze.start, maze.finish],
                 red:     failed_path,
                 blue:    dfs.success_path
    sleep failed_sleep_duration
  end

  display.call maze:    maze,
               heading: {text: 'Depth First Search: Success Path', colour: :blue},
               green:   [maze.start, maze.finish],
               blue:    dfs.success_path
end
