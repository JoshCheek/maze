#!/usr/bin/env ruby -s

default_width  = 40
default_height = 30

# =====  Half-assed help screen  =====
instructions = <<INSTRUCTIONS
Example:
  # use defaults
  $ #{$PROGRAM_NAME}

  # set all the things!
  $ #{$PROGRAM_NAME} -w=20 -h=30 -s=

Options
  -w=123       # Set the maze width (defaults to #{default_width})
  -h=123       # Set the maze height (defaults to #{default_height})
  -s=123       # SEt the random seed (defaults to whatever Ruby initializes it with)
INSTRUCTIONS

at_exit { puts instructions if $! && !$!.kind_of?(SystemExit) }

if $h == true
  puts instructions
  exit
end

# =====  Arg parsing (done mostly by ruby via the -s flag)  =====

maze_width  = ($w || default_width).to_i
maze_height = ($h || default_height).to_i
random_seed = ($s || Random::DEFAULT.seed).to_i

# =====  Load the lib =====
$LOAD_PATH.unshift File.expand_path("../../lib", __FILE__)
require 'maze'

# =====  Record randomness  =====
Random.srand random_seed
at_exit { puts "call with -s=#{random_seed} to get this maze again" }

# ===== Main  =====
display = Maze::Display.new(enable: true, stream: $stdout)
display.clear

display.without_cursor do
  maze = Maze::Generate.call width: maze_width, height: maze_height do |cell, generator|
    display.call maze:    generator.maze,
                 green:   cell,
                 heading: {text: "Paving", colour: :red}
  end
  maze.breadth_first_search(maze.start, maze.finish, display)
end
